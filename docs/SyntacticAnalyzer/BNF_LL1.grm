<START> ::= <prog> '$'

<aParams> ::= pushNull <expr> <rept-aParams1> makeFamilyAparams
<aParams> ::= pushNull EPSILON makeFamilyAparams

<aParamsTail> ::= ',' <expr> 

<addOp> ::= '+' madeNodePlus
<addOp> ::= '-' madeNodeMinus
<addOp> ::= 'or' madeNodeOr

<arithExpr> ::= <term> <rightrec-arithExpr> 

<arraySize> ::= '[' <arraysize2>
<arraySize2> ::= 'intnum' makeNodeIntnum ']'
<arraySize2> ::= makeNodeEmptySize ']'

<assignOp> ::= '='

<expr> ::= <arithExpr> <expr2>
<expr2> ::= <relOp> <arithExpr> makeFamilyRelExpr
<expr2> ::= EPSILON makeFamilyArithExpr

<fParams> ::= pushNull 'id' makeNodeId ':' <type> pushNull <rept-fParams3> makeFamilyDimList makeFamilyFParam <rept-fParams4> makeFamilyFParamList
<fParams> ::= pushNull EPSILON makeFamilyFParamList

<fParamsTail> ::= ',' 'id' makeNodeId ':' <type> pushNull <rept-fParamsTail4> makeFamilyDimList makeFamilyFParam
 
<factor> ::= 'id' makeNodeId <factor2> <rept-variableOrFunctionCall>
<factor> ::= 'intnum' makeNodeIntnum
<factor> ::= 'floatnum' makeNodeFloatnum
<factor> ::= '(' <arithExpr> makeFamilyArithExpr ')'
<factor> ::= 'not' <factor> makeNodeNot
<factor> ::= <sign> <factor> makeNodeSign
factor2 ::= '(' <aParams> ')' makeFamilyFuncCall
factor2 ::= pushNull <rept-idnest1> makeFamilyIndexList makeFamilyVar

<rept-variableOrFunctionCall> ::= <idnest> <rept-variableOrFunctionCall>
<rept-variableOrFunctionCall> ::= EPSILON

<funcBody> ::= '{' pushNull <rept-funcBody1> makeFamilyFuncBody '}'

<funcDecl> ::= <funcHead> ';' 

<funcDef> ::= <funcHead> <funcBody> makeFamilyFuncDef

<funcHead> ::= 'func' 'id' makeNodeId '(' <fParams> ')' 'arrow' <returnType> makeFamilyFuncHead

<idnest> ::= '.' makeNodeDotOp 'id' makeNodeId <idnest2>
<idnest2> ::= '(' <aParams> ')' makeFamilyFuncCall
<idnest2> ::= pushNull <rept-idnest1> makeFamilyIndexList makeFamilyVar makeFamilyDot

<implDef> ::= 'impl' 'id' makeNodeId '{' pushNull <rept-implDef3> makeFamilyFuncDefList makeFamilyImplDef '}' 

<indice> ::= '[' <arithExpr> ']'

<memberDecl> ::= <funcDecl>
<memberDecl> ::= <varDecl>

<multOp> ::= '*' makeNodeMult
<multOp> ::= '/' makeNodeDiv
<multOp> ::= 'and' makeNodeAnd

<opt-structDecl2> ::= 'inherits' 'id' makeNodeId <rept-opt-structDecl22> 
<opt-structDecl2> ::= EPSILON 

<prog> ::= pushNull <rept-prog0> makeFamilyProg

<relExpr> ::= <arithExpr> <relOp> <arithExpr> makeFamilyRelExpr

<relOp> ::= 'eq' makeNodeEq
<relOp> ::= 'neq' makeNodeNeq 
<relOp> ::= 'lt' makeNodeLt
<relOp> ::= 'gt' makeNodeGt
<relOp> ::= 'leq' makeNodeLeq
<relOp> ::= 'geq' makeNodeGeq

<rept-aParams1> ::= <aParamsTail> <rept-aParams1> 
<rept-aParams1> ::= EPSILON 

<rept-fParams3> ::= <arraySize> <rept-fParams3> 
<rept-fParams3> ::= EPSILON 

<rept-fParams4> ::= <fParamsTail> <rept-fParams4> 
<rept-fParams4> ::= EPSILON 

<rept-fParamsTail4> ::= <arraySize> <rept-fParamsTail4> 
<rept-fParamsTail4> ::= EPSILON 

<rept-funcBody1> ::= <varDeclOrStat> <rept-funcBody1> 
<rept-funcBody1> ::= EPSILON 

<rept-idnest1> ::= <indice> <rept-idnest1> 
<rept-idnest1> ::= EPSILON 

<rept-implDef3> ::= <funcDef> <rept-implDef3> 
<rept-implDef3> ::= EPSILON 

<rept-opt-structDecl22> ::= ',' 'id' makeNodeId <rept-opt-structDecl22> 
<rept-opt-structDecl22> ::= EPSILON 

<rept-prog0> ::= <structOrImplOrfunc> <rept-prog0> 
<rept-prog0> ::= EPSILON

<rept-statBlock1> ::= <statement> <rept-statBlock1> 
<rept-statBlock1> ::= EPSILON 

<rept-structDecl4> ::= <visibility> <memberDecl> <rept-structDecl4> 
<rept-structDecl4> ::= EPSILON 

<rept-varDecl4> ::= <arraySize> <rept-varDecl4> 
<rept-varDecl4> ::= EPSILON 

<returnType> ::= <type> 
<returnType> ::= 'void' madeNodeVoid

<rightrec-arithExpr> ::= EPSILON 
<rightrec-arithExpr> ::= <addOp> <term> <rightrec-arithExpr> makeFamilyAddOp

<rightrec-term> ::= EPSILON
<rightrec-term> ::= <multOp> <factor> <rightrec-term> makeFamilyMultOp

<sign> ::= '+' madeNodePlus
<sign> ::= '-' madeNodeMinus

<statBlock> ::= '{' pushNull <rept-statBlock1> makeFamilyStatBlock '}' 
<statBlock> ::= pushNull <statement> makeFamilyStatBlock
<statBlock> ::= pushNull EPSILON makeFamilyStatBlock

<statement> ::= 'id' makeNodeId <statement2> ';' 
<statement> ::= 'if' '(' <relExpr> ')' 'then' <statBlock> 'else' <statBlock> makeFamilyIfStat makeFamilyStat ';' 
<statement> ::= 'while' '(' <relExpr> ')' <statBlock> makeFamilyWhileStat makeFamilyStat ';' 
<statement> ::= 'read' '(' <variable> makeFamilyReadStat makeFamilyStat ')' ';' 
<statement> ::= 'write' '(' <expr> makeFamilyWriteStat makeFamilyStat ')' ';' 
<statement> ::= 'return' '(' <expr> makeFamilyReturnStat makeFamilyStat ')' ';'
<statement2> ::= '(' <aParams> ')' makeFamilyFuncCall makeFamilyDot <statement3>
<statement2> ::= pushNull <rept-idnest1> makeFamilyIndexList makeFamilyVar makeFamilyDot <statement4>
<statement3> ::= '.' makeNodeDotOp 'id' makeNodeId <statement2>
<statement3> ::= EPSILON
<statement4> ::= <assignOp> <expr> makeFamilyAssignStat makeFamilyStat
<statement4> ::= '.' makeNodeDotOp 'id' makeNodeId <statement2>

<structDecl> ::= 'struct' 'id' makeNodeId pushNull <opt-structDecl2> makeFamilyInherList '{' pushNull <rept-structDecl4> makeFamilyMembList '}' makeFamilyStructDecl ';' 

<structOrImplOrFunc> ::= <structDecl>
<structOrImplOrFunc> ::= <implDef>
<structOrImplOrFunc> ::= <funcDef>

<term> ::= <factor> <rightrec-term>

<type> ::= 'integer' makeNodeInteger
<type> ::= 'float' makeNodeFloatNum
<type> ::= 'id' makeNodeId

<varDecl> ::= 'let' 'id' makeNodeId ':' <type> <rept-varDecl4> makeFamilyDimList makeFamilyVarDecl ';' 

<varDeclOrStat> ::= <varDecl> 
<varDeclOrStat> ::= <statement>

<variable> ::= 'id' makeNodeId <variable2>
<variable2> ::= pushNull <rept-idnest1> makeFamilyIndexList makeFamilyVar <rept-variable>
<variable2> ::= '(' <aParams> ')' <varidnest>
<rept-variable> ::= <varidnest> <rept-variable>
<rept-variable> ::= EPSILON

<varidnest> ::= '.' makeNodeDotOp 'id' makeNodeId <varidnest2> 
<varidnest2> ::= '(' <aParams> ')' makeFamilyFuncCall makeFamilyDot <varidnest>
<varidnest2> ::= pushNull <rept-idnest1> makeFamilyIndexList makeFamilyVar makeFamilyDot

<visibility> ::= 'public' makeNodePublic
<visibility> ::= 'private' makeNodePrivate